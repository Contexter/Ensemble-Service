
import os
from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi
import yaml

# Import routers
from app.api.routes import root

# Create FastAPI app instance
app = FastAPI()

# Include routers
app.include_router(root.router)

# Set custom OpenAPI schema
# Note: FastAPI allows partial customization of the OpenAPI schema by overriding the default openapi() function.
# This script reads additional details from the custom OpenAPI file and merges them with the default schema.
# However, it does not entirely replace the FastAPI-generated schema, as FastAPI does not support full replacement.
# Instead, specific keys like 'info', 'servers', and 'components' are merged to ensure consistency with the custom specification.
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_path = "/service/openapi3_1.yml"
    if os.path.exists(openapi_path):
        try:
            with open(openapi_path, "r") as file:
                openapi_schema = safe_load(file)
        except YAMLError:
            logging.error("Error while parsing OpenAPI file")
            return app.openapi_schema
        except PermissionError:
            logging.error("Permission error while accessing OpenAPI file")
            return app.openapi_schema
        except (FileNotFoundError, IsADirectoryError):
            logging.error("File system error while accessing OpenAPI file")
            return app.openapi_schema

        # Proceed with merging the schemas if no exceptions occurred
        app.openapi_schema = get_openapi(
            title=app.title,
            version=app.version,
            description=app.description,
            routes=app.routes,
        )
        # Merge specific keys from the custom OpenAPI schema
        if 'info' in openapi_schema:
            app.openapi_schema['info'] = openapi_schema['info']
        if 'servers' in openapi_schema:
            app.openapi_schema['servers'] = openapi_schema['servers']
        if 'components' in openapi_schema:
            app.openapi_schema['components'] = openapi_schema['components']
    return app.openapi_schema

# Assign the custom OpenAPI function to overwrite the default behavior of FastAPI
# This approach allows for customizing certain parts of the schema, such as metadata and server information,
# while retaining the autogenerated parts for paths and operations.
app.openapi = custom_openapi
