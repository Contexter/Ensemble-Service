import os
import logging
from yaml import safe_load, YAMLError


def generate_main_entry():
    """
    Generate the main.py file for the FastAPI application, including routers and setting the custom OpenAPI schema.
    """
    base_dir = os.path.dirname(os.path.abspath(__file__))
    service_root = os.path.abspath(os.path.join(base_dir, ".."))
    app_dir = os.path.join(service_root, "app")
    main_file_path = os.path.join(app_dir, "main.py")
    openapi_file_path = os.path.join(service_root, "openapi3_1.yml")

    main_content = f"""
import os
from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi
import yaml

# Import routers
from app.api.routes import root

# Create FastAPI app instance
app = FastAPI()

# Include routers
app.include_router(root.router)

# Set custom OpenAPI schema
# Note: FastAPI allows partial customization of the OpenAPI schema by overriding the default openapi() function.
# This script reads additional details from the custom OpenAPI file and merges them with the default schema.
# However, it does not entirely replace the FastAPI-generated schema, as FastAPI does not support full replacement.
# Instead, specific keys like 'info', 'servers', and 'components' are merged to ensure consistency with the custom specification.
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_path = "{openapi_file_path}"
    if os.path.exists(openapi_path):
        try:
            with open(openapi_path, "r") as file:
                openapi_schema = safe_load(file)
            app.openapi_schema = get_openapi(
                title=app.title,
                version=app.version,
                description=app.description,
                routes=app.routes,
            )
            # Merge specific keys from the custom OpenAPI schema
            if 'info' in openapi_schema:
                app.openapi_schema['info'] = openapi_schema['info']
            if 'servers' in openapi_schema:
                app.openapi_schema['servers'] = openapi_schema['servers']
            if 'components' in openapi_schema:
                app.openapi_schema['components'] = openapi_schema['components']
        except YAMLError as e:
            logging.error(f"Error while parsing OpenAPI file: {e}")
        except PermissionError as e:
            logging.error(f"Permission error while accessing OpenAPI file: {e}")
        except (FileNotFoundError, IsADirectoryError) as e:
            logging.error(f"File system error while accessing OpenAPI file: {e}")
    return app.openapi_schema

# Assign the custom OpenAPI function to overwrite the default behavior of FastAPI
# This approach allows for customizing certain parts of the schema, such as metadata and server information,
# while retaining the autogenerated parts for paths and operations.
app.openapi = custom_openapi
"""

    try:
        # Create the app directory if it doesn't exist
        try:
            os.makedirs(app_dir, exist_ok=True)
        except PermissionError as e:
            logging.error(f"Permission error while creating directory {app_dir}: {e}")
            return

        # Write the main.py file, with a backup if the file already exists
        if os.path.exists(main_file_path):
            backup_path = main_file_path + ".bak"
            if os.path.exists(backup_path):
                os.remove(backup_path)
            os.rename(main_file_path, backup_path)
            logging.info(f"Backup of existing main.py created at {backup_path}")

        with open(main_file_path, "w") as main_file:
            main_file.write(main_content)

        logging.info(f"Successfully created/updated main.py at {main_file_path}")
    except IOError as e:
        logging.error(f"Error while writing main.py: {e}")
    except PermissionError as e:
        logging.error(f"Permission error while writing main.py: {e}")
    except (FileNotFoundError, IsADirectoryError) as e:
        logging.error(f"File system error while writing main.py: {e}")


if __name__ == "__main__":
    generate_main_entry()

